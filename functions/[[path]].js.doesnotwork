import Debug from 'debug'
import { jsonResponse, getDebug } from './_utils'

const debug = getDebug('blueprint:do:[[path]]')

class AttributeRewriter {
  constructor(nonce, tagName) {
    this.nonce = nonce
    this.tagName = tagName
  }

  element(element) {
    if (this.tagName === 'link') {
      const attribute = element.getAttribute('rel')
      if (attribute && attribute === 'stylesheet') {
        element.setAttribute('nonce', this.nonce)
      }
    } else {
      element.setAttribute('nonce', this.nonce)
    }
  }
}

export async function onRequestGet({ request, env, params, next }) {
  Debug.enable(env.DEBUG)
  const url = new URL(request.url)
  if (url.pathname === '/' || url.pathname === '/index.html') {
    debug('Rewriting index.html for CSP')
    debug(url.pathname)
    debug(url.origin)

    const nonce = btoa(crypto.getRandomValues(new Uint32Array(2)))

    const CSPheader = [
      "default-src 'self';",
      "script-src 'self' 'nonce-" + nonce + ";",
      "style-src 'self' 'nonce-" + nonce + ";",
      "img-src 'self';",
      "font-src 'self';",
      "connect-src 'none';",
      "media-src 'none';",
      "object-src 'none';",
      "child-src 'none';",
      "frame-ancestors 'none';",
      "form-action 'none';",
      "upgrade-insecure-requests;",
      "manifest-src 'none';",
      "require-trusted-types-for 'script';"
    ].join(' ')

    const res = await env.ASSETS.fetch(url.origin + '/index.html')
    const theBody = await res.text()
    debug(theBody)

    // eslint-disable-next-line no-undef
    const rewriter = new HTMLRewriter()
      .on("script", new AttributeRewriter(nonce, "script"))
      .on("link", new AttributeRewriter(nonce, "link"))

    const newRes = rewriter.transform(res)
    debug(newRes)
    const theNewBody = await newRes.text()
    debug(theNewBody)

    return new Response(theBody)
  }
  return next()
}
